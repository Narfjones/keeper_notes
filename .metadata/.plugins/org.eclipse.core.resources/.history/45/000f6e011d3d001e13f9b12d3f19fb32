package keeper.notes.service;

import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Objects;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import keeper.notes.controller.model.AnimalData;
import keeper.notes.controller.model.KeeperData;
import keeper.notes.dao.AnimalDao;
import keeper.notes.dao.KeeperDao;
import keeper.notes.dao.NoteDao;
import keeper.notes.entity.Animal;
import keeper.notes.entity.Keeper;

@Service
public class KeeperNotesService {

	@Autowired
	private KeeperDao keeperDao;

	@Autowired
	private AnimalDao animalDao;

	@Autowired
	private NoteDao noteDao;

	@Transactional(readOnly = false)
	public KeeperData saveKeeper(KeeperData keeperData) {
		Keeper keeper = findOrCreateKeeper(keeperData.getKeeperId());
		copyKeeperData(keeper, keeperData);

		Keeper dbKeeper = keeperDao.save(keeper);
		return new KeeperData(dbKeeper);
	}

	private void copyKeeperData(Keeper keeper, KeeperData keeperData) {
		keeper.setKeeperId(keeperData.getKeeperId());
		keeper.setFirstName(keeperData.getFirstName());
		keeper.setLastName(keeperData.getLastName());
		keeper.setRadioNumber(keeperData.getRadioNumber());

	}

	private Keeper findOrCreateKeeper(Long keeperId) {
		Keeper keeper;

		if (Objects.isNull(keeperId)) {
			keeper = new Keeper();
		} else {
			keeper = findKeeperById(keeperId);
		}

		return keeper;
	}

	private Keeper findKeeperById(Long keeperId) {
		return keeperDao.findById(keeperId)
				.orElseThrow(() -> new NoSuchElementException("Keeper with ID=" + keeperId + " does not exist."));
	}

	@Transactional(readOnly = false)
	public AnimalData saveAnimal(AnimalData animalData) {
		Animal animal = findOrCreateAnimal(animalData.getAnimalId());
		copyAnimalData(animal, animalData);

		Animal dbAnimal = animalDao.save(animal);
		return new AnimalData(dbAnimal);

	}

	private void copyAnimalData(Animal animal, AnimalData animalData) {
		animal.setAnimalId(animalData.getAnimalId());
		animal.setSpecies(animalData.getSpecies());
		animal.setCommonName(animalData.getCommonName());
		animal.setAnimalName(animalData.getAnimalName());
		animal.setLocation(animalData.getLocation());
	}

	private Animal findOrCreateAnimal(Long animalId) {
		Animal animal;

		if (Objects.isNull(animalId)) {
			animal = new Animal();
		} else {
			animal = findAnimalById(animalId);
		}
		return animal;
	}

	private Animal findAnimalById(Long animalId) {
		return animalDao.findById(animalId)
				.orElseThrow(() -> new NoSuchElementException("Animal with ID=" + animalId + " does not exist."));
	}

	public List<KeeperData> retrieveAllKeepers() {
		List<Keeper> keepers = keeperDao.findAll();
		List<KeeperData> kdList = new LinkedList<>();
		
		for(Keeper keeper : keepers) {
			KeeperData temp = new KeeperData(keeper);
			kdList.add(temp);
		}
		return kdList;
	}

	public KeeperData retrieveKeeperById(Long keeperId) {
		Keeper keeper = findKeeperById(keeperId);
		return new KeeperData(keeper);
	}
}
